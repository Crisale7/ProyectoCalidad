{
	"info": {
		"_postman_id": "ca2fb49d-dbfb-407c-b2d7-cee2ae070081",
		"name": "API-testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30074083"
	},
	"item": [
		{
			"name": "Create New Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Guarda la ID del ítem creado en una variable de colección\r",
							"pm.test(\"Save item ID to collection variable\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set(\"itemId\", jsonData.Id);\r",
							"    pm.expect(pm.collectionVariables.get(\"itemId\")).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"// Test para verificar el código de estado\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test para asegurar que el tiempo de respuesta es menor a 500ms\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Test para confirmar que el ítem fue creado con el contenido correcto\r",
							"pm.test(\"Item was created with correct content\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Content).to.eql(\"Nuevo item de prueba\");\r",
							"});\r",
							"\r",
							"// Test para asegurar que el ID del ítem es válido (número entero)\r",
							"pm.test(\"Item ID is a valid integer\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.Id % 1).to.eql(0);\r",
							"});\r",
							"\r",
							"// Test para confirmar que el ítem no está marcado como completado inicialmente\r",
							"pm.test(\"Item is not checked by default\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Checked).to.be.false;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Content\": \"Nuevo item de prueba\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/items.json",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Item to Done",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el código de estado\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test para asegurar que el tiempo de respuesta es menor a 500ms\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Test para confirmar que el ítem tiene el estado 'Checked' en true\r",
							"pm.test(\"Item is marked as done\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Checked).to.be.true;\r",
							"});\r",
							"\r",
							"// Test para asegurar que el ID del ítem actualizado coincide con el guardado en la colección\r",
							"pm.test(\"Item ID matches the collection variable\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Id).to.eql(parseInt(pm.collectionVariables.get(\"itemId\")));\r",
							"});\r",
							"\r",
							"// Test para verificar que la respuesta contiene las propiedades clave\r",
							"pm.test(\"Response contains expected properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"Content\");\r",
							"    pm.expect(jsonData).to.have.property(\"Checked\");\r",
							"    pm.expect(jsonData).to.have.property(\"Id\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Checked\": true\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/items/{{itemId}}.json",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items",
						"{{itemId}}.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Filters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el código de estado\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test para asegurar que el tiempo de respuesta es menor a 500ms\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Test para asegurar que la respuesta es un array\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Test para verificar que cada filtro contiene las propiedades esperadas\r",
							"pm.test(\"Each filter contains expected properties\", function () {\r",
							"    const filters = pm.response.json();\r",
							"    filters.forEach(filter => {\r",
							"        pm.expect(filter).to.have.property(\"Id\");\r",
							"        pm.expect(filter).to.have.property(\"Content\");\r",
							"        pm.expect(filter).to.have.property(\"ItemsCount\");\r",
							"        pm.expect(filter).to.have.property(\"Icon\");\r",
							"        pm.expect(filter).to.have.property(\"ItemType\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test para asegurar que al menos un filtro esté presente en la respuesta\r",
							"pm.test(\"Array length is greater than zero\", function () {\r",
							"    pm.expect(pm.response.json().length).to.be.above(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/filters.json",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"filters.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Done Items of a Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el código de estado\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test para asegurar que el tiempo de respuesta es menor a 500ms\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Test para asegurar que la respuesta es un array (si la API retorna un array de items)\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Test para verificar que todos los items están marcados como \"done\"\r",
							"pm.test(\"All items are marked as done\", function () {\r",
							"    const items = pm.response.json();\r",
							"    items.forEach(item => pm.expect(item.Checked).to.be.true);\r",
							"});\r",
							"\r",
							"// Test para verificar la presencia de propiedades clave\r",
							"pm.test(\"Each item contains expected properties\", function () {\r",
							"    const items = pm.response.json();\r",
							"    items.forEach(item => {\r",
							"        pm.expect(item).to.have.property(\"Content\");\r",
							"        pm.expect(item).to.have.property(\"Id\");\r",
							"        pm.expect(item).to.have.property(\"Checked\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/filters/{{ID_FILTER}}/doneitems.json",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"filters",
						"{{ID_FILTER}}",
						"doneitems.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el código de estado\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test para asegurar que el tiempo de respuesta es menor a 500ms\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Test para asegurar que la respuesta es un array (lista de ítems)\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Test para verificar que cada ítem contiene las propiedades esperadas\r",
							"pm.test(\"Each item contains expected properties\", function () {\r",
							"    const items = pm.response.json();\r",
							"    items.forEach(item => {\r",
							"        pm.expect(item).to.have.property(\"Id\");\r",
							"        pm.expect(item).to.have.property(\"Content\");\r",
							"        pm.expect(item).to.have.property(\"Checked\");\r",
							"        pm.expect(item).to.have.property(\"ProjectId\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test para asegurar que al menos un ítem está presente en la respuesta\r",
							"pm.test(\"Array length is greater than zero\", function () {\r",
							"    pm.expect(pm.response.json().length).to.be.above(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/items.json",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Item By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test para verificar el código de estado\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test para asegurar que el tiempo de respuesta es menor a 500ms\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Test para verificar que el ID del ítem en la respuesta coincide con el ID guardado en la variable de colección\r",
							"pm.test(\"Item ID matches the collection variable\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Id).to.eql(parseInt(pm.collectionVariables.get(\"itemId\")));\r",
							"});\r",
							"\r",
							"// Test para confirmar que el ítem contiene las propiedades esperadas\r",
							"pm.test(\"Item contains expected properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"Content\");\r",
							"    pm.expect(jsonData).to.have.property(\"Checked\");\r",
							"    pm.expect(jsonData).to.have.property(\"ProjectId\");\r",
							"    pm.expect(jsonData).to.have.property(\"Id\");\r",
							"});\r",
							"\r",
							"// Test para verificar que el campo 'Content' es una cadena de texto\r",
							"pm.test(\"Content is a string\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.Content).to.be.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/items/{{itemId}}.json",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items",
						"{{itemId}}.json"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "itemId",
			"value": ""
		}
	]
}